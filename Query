// Step 1: Group by Product Description and Retrieve Total Investment
var productInvestments = dbContext.Investments
    .Join(dbContext.Project_Category, inv => inv.ProductType, pc => pc.Code, (inv, pc) => new { inv, pc })
    .Join(dbContext.Investment_Status, inv_pc => inv_pc.inv.StatusID, invst => invst.ID, (inv_pc, invst) => new { inv_pc.inv, inv_pc.pc, invst })
    .GroupBy(x => new { x.pc.Description })
    .Select(g => new
    {
        ProductDescription = g.Key.Description,
        TotalInvestment = g.Sum(x => x.inv.InvestmentAmount)
    })
    .ToList();

// Step 2: Retrieve Yearly Investments
var yearlyInvestments = dbContext.Investments
    .Join(dbContext.Project_Category, inv => inv.ProductType, pc => pc.Code, (inv, pc) => new { inv, pc })
    .Join(dbContext.Investment_Status, inv_pc => inv_pc.inv.StatusID, invst => invst.ID, (inv_pc, invst) => new { inv_pc.inv, inv_pc.pc, invst })
    .GroupBy(x => new { x.pc.Description, Year = x.inv.ClosedDate.Year })
    .Select(g => new
    {
        ProductDescription = g.Key.Description,
        Year = g.Key.Year,
        YearlyInvestment = g.Sum(x => x.inv.InvestmentAmount)
    })
    .ToList();

// Step 3: Combine the Results in Memory
var combinedResult = productInvestments.Select(pi => new
{
    pi.ProductDescription,
    pi.TotalInvestment,
    YearlyInvestments = yearlyInvestments
        .Where(yi => yi.ProductDescription == pi.ProductDescription)
        .Select(yi => new { yi.Year, yi.YearlyInvestment })
        .ToList()
}).ToList();
